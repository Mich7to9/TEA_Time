; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	M:\Mikrocontroller 6.Semester\Ege\loesung_1\main.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	??_C@_0L@HPNOEAAD@result?4txt?$AA@		; `string'
PUBLIC	??_C@_0L@PNNHGMAJ@foobar?4txt?$AA@		; `string'
_DATA	SEGMENT
COMM	_list_node_mem_pool:BYTE:0f80H
_DATA	ENDS
;	COMDAT ??_C@_0L@HPNOEAAD@result?4txt?$AA@
CONST	SEGMENT
??_C@_0L@HPNOEAAD@result?4txt?$AA@ DB 'result.txt', 00H	; `string'
CONST	ENDS
_DATA	SEGMENT
_in_filename DD	FLAT:??_C@_0L@PNNHGMAJ@foobar?4txt?$AA@
_out_filename DD FLAT:??_C@_0L@HPNOEAAD@result?4txt?$AA@
_DATA	ENDS
;	COMDAT ??_C@_0L@PNNHGMAJ@foobar?4txt?$AA@
CONST	SEGMENT
??_C@_0L@PNNHGMAJ@foobar?4txt?$AA@ DB 'foobar.txt', 00H	; `string'
CONST	ENDS
PUBLIC	??_C@_0BF@GADNHKCO@delta?5time?5us?3?5?$CFllu?6?$AA@ ; `string'
PUBLIC	??_C@_0BJ@MFNFDPOP@?$CFllu?5?$DN?5?$CFllu?5?$CL?5?$CI?$CFd?5?$CK?5?$CFd?$CJ?6?$AA@ ; `string'
PUBLIC	_do_mac_operation
PUBLIC	??_C@_0O@GFOGKMCL@A?3?$DM?$CFd?$DO?5B?3?$DM?$CFd?$DO?$AA@ ; `string'
PUBLIC	??_C@_0CC@ECDKLDIE@Error?5while?5reading?5data?5from?3?5?$CF@ ; `string'
PUBLIC	??_C@_0CD@ELLALIEA@Error?5while?5opening?5files?3?5?$CFs?5?1?5@ ; `string'
PUBLIC	??_C@_01NOFIACDB@w?$AA@				; `string'
PUBLIC	??_C@_01KDCPPGHE@r?$AA@				; `string'
PUBLIC	??_C@_0CG@MPOPDLIK@unable?5to?5setup?5a?5stop?5watch?5?9?$DO?5@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	_main
EXTRN	__imp__fclose:PROC
EXTRN	_stop_stop_watch:PROC
EXTRN	__imp__fprintf:PROC
EXTRN	__imp__sscanf:PROC
EXTRN	__imp__fgets:PROC
EXTRN	_start_stop_watch:PROC
EXTRN	__imp__feof:PROC
EXTRN	__imp__fopen:PROC
EXTRN	__imp__printf:PROC
EXTRN	_init_stop_watch:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
_BSS	SEGMENT
_operands_b DD	0400H DUP (?)
_operands_a DD	0400H DUP (?)
_result	DQ	0404H DUP (?)
_BSS	ENDS
;	COMDAT ??_C@_0BF@GADNHKCO@delta?5time?5us?3?5?$CFllu?6?$AA@
; File m:\mikrocontroller 6.semester\ege\loesung_1\main.c
CONST	SEGMENT
??_C@_0BF@GADNHKCO@delta?5time?5us?3?5?$CFllu?6?$AA@ DB 'delta time us: %'
	DB	'llu', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@MFNFDPOP@?$CFllu?5?$DN?5?$CFllu?5?$CL?5?$CI?$CFd?5?$CK?5?$CFd?$CJ?6?$AA@
CONST	SEGMENT
??_C@_0BJ@MFNFDPOP@?$CFllu?5?$DN?5?$CFllu?5?$CL?5?$CI?$CFd?5?$CK?5?$CFd?$CJ?6?$AA@ DB '%'
	DB	'llu = %llu + (%d * %d)', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@GFOGKMCL@A?3?$DM?$CFd?$DO?5B?3?$DM?$CFd?$DO?$AA@
CONST	SEGMENT
??_C@_0O@GFOGKMCL@A?3?$DM?$CFd?$DO?5B?3?$DM?$CFd?$DO?$AA@ DB 'A:<%d> B:<%'
	DB	'd>', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@ECDKLDIE@Error?5while?5reading?5data?5from?3?5?$CF@
CONST	SEGMENT
??_C@_0CC@ECDKLDIE@Error?5while?5reading?5data?5from?3?5?$CF@ DB 'Error w'
	DB	'hile reading data from: %s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@ELLALIEA@Error?5while?5opening?5files?3?5?$CFs?5?1?5@
CONST	SEGMENT
??_C@_0CD@ELLALIEA@Error?5while?5opening?5files?3?5?$CFs?5?1?5@ DB 'Error'
	DB	' while opening files: %s / %s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01NOFIACDB@w?$AA@
CONST	SEGMENT
??_C@_01NOFIACDB@w?$AA@ DB 'w', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r?$AA@
CONST	SEGMENT
??_C@_01KDCPPGHE@r?$AA@ DB 'r', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@MPOPDLIK@unable?5to?5setup?5a?5stop?5watch?5?9?$DO?5@
CONST	SEGMENT
??_C@_0CG@MPOPDLIK@unable?5to?5setup?5a?5stop?5watch?5?9?$DO?5@ DB 'unabl'
	DB	'e to setup a stop watch -> abort', 00H	; `string'
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT _main
_TEXT	SEGMENT
_delta_time$81701 = -424				; size = 8
_prev_result$81700 = -408				; size = 8
_operand_b$81699 = -392					; size = 4
_operand_a$81698 = -380					; size = 4
_line_buffer$81697 = -368				; size = 256
_counter$81696 = -104					; size = 4
_stat$ = -92						; size = 36
_idx$ = -48						; size = 4
_out_file_hdl$ = -36					; size = 4
_in_file_hdl$ = -24					; size = 4
_ret$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_argc$ = 8						; size = 4
_argv$ = 12						; size = 4
_main	PROC						; COMDAT

; 166  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 6c 02 00
	00		 sub	 esp, 620		; 0000026cH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 94 fd ff
	ff		 lea	 edi, DWORD PTR [ebp-620]
  00012	b9 9b 00 00 00	 mov	 ecx, 155		; 0000009bH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 167  : 	int32_t ret = EXIT_SUCCESS;

  00028	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _ret$[ebp], 0

; 168  : 	FILE * in_file_hdl = NULL;

  0002f	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _in_file_hdl$[ebp], 0

; 169  : 	FILE * out_file_hdl = NULL;

  00036	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _out_file_hdl$[ebp], 0

; 170  : 	//listNode_t *curr = result_list.headOfList;
; 171  : 	int idx = 0;

  0003d	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _idx$[ebp], 0

; 172  : 
; 173  : 	statistics_t stat;
; 174  : 	stat.avg_operand_a = 0;

  00044	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR _stat$[ebp+16], 0

; 175  : 	stat.avg_operand_b = 0;

  0004b	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR _stat$[ebp+20], 0

; 176  : 	stat.sum_operand_a = 0;

  00052	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR _stat$[ebp+24], 0

; 177  : 	stat.sum_operand_b = 0;

  00059	c7 45 c0 00 00
	00 00		 mov	 DWORD PTR _stat$[ebp+28], 0

; 178  : 	stat.max_operand_a = 0;

  00060	c7 45 a8 00 00
	00 00		 mov	 DWORD PTR _stat$[ebp+4], 0

; 179  : 	stat.max_operand_b = 0;

  00067	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR _stat$[ebp+12], 0

; 180  : 	stat.min_operand_a = 0xFFFFFFFF;

  0006e	c7 45 a4 ff ff
	ff ff		 mov	 DWORD PTR _stat$[ebp], -1

; 181  : 	stat.min_operand_b = 0xFFFFFFFF;

  00075	c7 45 ac ff ff
	ff ff		 mov	 DWORD PTR _stat$[ebp+8], -1

; 182  : 	stat.counter = 0;

  0007c	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR _stat$[ebp+32], 0

; 183  : 
; 184  : 	if(EXIT_FAILURE == init_stop_watch())

  00083	e8 00 00 00 00	 call	 _init_stop_watch
  00088	83 f8 01	 cmp	 eax, 1
  0008b	75 17		 jne	 SHORT $LN15@main

; 185  : 	{
; 186  : 		printf("unable to setup a stop watch -> abort");

  0008d	8b f4		 mov	 esi, esp
  0008f	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@MPOPDLIK@unable?5to?5setup?5a?5stop?5watch?5?9?$DO?5@
  00094	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__printf
  0009a	83 c4 04	 add	 esp, 4
  0009d	3b f4		 cmp	 esi, esp
  0009f	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN15@main:

; 187  : 	}
; 188  : 
; 189  : 	in_file_hdl = fopen (in_filename,"r");

  000a4	8b f4		 mov	 esi, esp
  000a6	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r?$AA@
  000ab	a1 00 00 00 00	 mov	 eax, DWORD PTR _in_filename
  000b0	50		 push	 eax
  000b1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fopen
  000b7	83 c4 08	 add	 esp, 8
  000ba	3b f4		 cmp	 esi, esp
  000bc	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000c1	89 45 e8	 mov	 DWORD PTR _in_file_hdl$[ebp], eax

; 190  : 	out_file_hdl = fopen (out_filename,"w");

  000c4	8b f4		 mov	 esi, esp
  000c6	68 00 00 00 00	 push	 OFFSET ??_C@_01NOFIACDB@w?$AA@
  000cb	a1 00 00 00 00	 mov	 eax, DWORD PTR _out_filename
  000d0	50		 push	 eax
  000d1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fopen
  000d7	83 c4 08	 add	 esp, 8
  000da	3b f4		 cmp	 esi, esp
  000dc	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000e1	89 45 dc	 mov	 DWORD PTR _out_file_hdl$[ebp], eax

; 191  : 
; 192  : 	if ((NULL == in_file_hdl) || (NULL == out_filename) )

  000e4	83 7d e8 00	 cmp	 DWORD PTR _in_file_hdl$[ebp], 0
  000e8	74 09		 je	 SHORT $LN13@main
  000ea	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _out_filename, 0
  000f1	75 30		 jne	 SHORT $LN14@main
$LN13@main:

; 193  : 	{
; 194  : 		printf("Error while opening files: %s / %s",in_filename,out_filename);

  000f3	8b f4		 mov	 esi, esp
  000f5	a1 00 00 00 00	 mov	 eax, DWORD PTR _out_filename
  000fa	50		 push	 eax
  000fb	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _in_filename
  00101	51		 push	 ecx
  00102	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@ELLALIEA@Error?5while?5opening?5files?3?5?$CFs?5?1?5@
  00107	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__printf
  0010d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00110	3b f4		 cmp	 esi, esp
  00112	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 195  : 		ret = EXIT_FAILURE;

  00117	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _ret$[ebp], 1

; 196  : 	}
; 197  : 	else

  0011e	e9 7a 02 00 00	 jmp	 $LN12@main
$LN14@main:

; 198  : 	{
; 199  : 		uint32_t counter = 0; 

  00123	c7 45 98 00 00
	00 00		 mov	 DWORD PTR _counter$81696[ebp], 0

; 200  : 		char line_buffer[MAX_LINE_BUFFER];
; 201  : 		int operand_a = 0; 

  0012a	c7 85 84 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _operand_a$81698[ebp], 0

; 202  : 		int operand_b = 0; 

  00134	c7 85 78 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _operand_b$81699[ebp], 0

; 203  : 		uint64_t prev_result = 0; 

  0013e	c7 85 68 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _prev_result$81700[ebp], 0
  00148	c7 85 6c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _prev_result$81700[ebp+4], 0

; 204  : 		uint64_t delta_time = 0;

  00152	c7 85 58 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _delta_time$81701[ebp], 0
  0015c	c7 85 5c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _delta_time$81701[ebp+4], 0
$LN11@main:

; 205  : 		/*
; 206  : 		 * Stop on end of file or on array boundary
; 207  : 		 */
; 208  : 		while((0 == feof(in_file_hdl)) && ( MAX_TEXT_LINES > counter ))

  00166	8b f4		 mov	 esi, esp
  00168	8b 45 e8	 mov	 eax, DWORD PTR _in_file_hdl$[ebp]
  0016b	50		 push	 eax
  0016c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__feof
  00172	83 c4 04	 add	 esp, 4
  00175	3b f4		 cmp	 esi, esp
  00177	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0017c	85 c0		 test	 eax, eax
  0017e	0f 85 19 02 00
	00		 jne	 $LN12@main
  00184	81 7d 98 00 04
	00 00		 cmp	 DWORD PTR _counter$81696[ebp], 1024 ; 00000400H
  0018b	0f 83 0c 02 00
	00		 jae	 $LN12@main

; 209  : 		{
; 210  : 			start_stop_watch();

  00191	e8 00 00 00 00	 call	 _start_stop_watch

; 211  : 			if(NULL == fgets(line_buffer,MAX_LINE_BUFFER,in_file_hdl))

  00196	8b f4		 mov	 esi, esp
  00198	8b 45 e8	 mov	 eax, DWORD PTR _in_file_hdl$[ebp]
  0019b	50		 push	 eax
  0019c	68 00 01 00 00	 push	 256			; 00000100H
  001a1	8d 8d 90 fe ff
	ff		 lea	 ecx, DWORD PTR _line_buffer$81697[ebp]
  001a7	51		 push	 ecx
  001a8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fgets
  001ae	83 c4 0c	 add	 esp, 12			; 0000000cH
  001b1	3b f4		 cmp	 esi, esp
  001b3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001b8	85 c0		 test	 eax, eax
  001ba	75 51		 jne	 SHORT $LN9@main

; 212  : 			{
; 213  : 				if(!feof(in_file_hdl))

  001bc	8b f4		 mov	 esi, esp
  001be	8b 45 e8	 mov	 eax, DWORD PTR _in_file_hdl$[ebp]
  001c1	50		 push	 eax
  001c2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__feof
  001c8	83 c4 04	 add	 esp, 4
  001cb	3b f4		 cmp	 esi, esp
  001cd	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001d2	85 c0		 test	 eax, eax
  001d4	75 26		 jne	 SHORT $LN8@main

; 214  : 				{
; 215  : 					printf("Error while reading data from: %s",in_filename);

  001d6	8b f4		 mov	 esi, esp
  001d8	a1 00 00 00 00	 mov	 eax, DWORD PTR _in_filename
  001dd	50		 push	 eax
  001de	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@ECDKLDIE@Error?5while?5reading?5data?5from?3?5?$CF@
  001e3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__printf
  001e9	83 c4 08	 add	 esp, 8
  001ec	3b f4		 cmp	 esi, esp
  001ee	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 216  : 					ret = EXIT_FAILURE;

  001f3	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _ret$[ebp], 1

; 217  : 				}
; 218  : 				else

  001fa	eb 07		 jmp	 SHORT $LN7@main
$LN8@main:

; 219  : 				{
; 220  : 					ret = EXIT_SUCCESS;

  001fc	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _ret$[ebp], 0
$LN7@main:

; 221  : 				}
; 222  : 				break;

  00203	e9 95 01 00 00	 jmp	 $LN12@main

; 223  :  			}
; 224  : 			else

  00208	e9 55 01 00 00	 jmp	 $LN6@main
$LN9@main:

; 225  : 			{
; 226  : 				if (2 != sscanf(line_buffer,"A:<%d> B:<%d>",&operand_a,&operand_b))

  0020d	8b f4		 mov	 esi, esp
  0020f	8d 85 78 fe ff
	ff		 lea	 eax, DWORD PTR _operand_b$81699[ebp]
  00215	50		 push	 eax
  00216	8d 8d 84 fe ff
	ff		 lea	 ecx, DWORD PTR _operand_a$81698[ebp]
  0021c	51		 push	 ecx
  0021d	68 00 00 00 00	 push	 OFFSET ??_C@_0O@GFOGKMCL@A?3?$DM?$CFd?$DO?5B?3?$DM?$CFd?$DO?$AA@
  00222	8d 95 90 fe ff
	ff		 lea	 edx, DWORD PTR _line_buffer$81697[ebp]
  00228	52		 push	 edx
  00229	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__sscanf
  0022f	83 c4 10	 add	 esp, 16			; 00000010H
  00232	3b f4		 cmp	 esi, esp
  00234	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00239	83 f8 02	 cmp	 eax, 2
  0023c	74 11		 je	 SHORT $LN5@main

; 227  : 				{
; 228  : 					ret = EXIT_FAILURE;

  0023e	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _ret$[ebp], 1

; 229  : 					break;

  00245	e9 53 01 00 00	 jmp	 $LN12@main

; 230  : 				}
; 231  : 				else

  0024a	e9 13 01 00 00	 jmp	 $LN6@main
$LN5@main:

; 232  : 				{
; 233  : 					result[counter] = do_mac_operation(operand_a,operand_b,prev_result);

  0024f	8b 85 6c fe ff
	ff		 mov	 eax, DWORD PTR _prev_result$81700[ebp+4]
  00255	50		 push	 eax
  00256	8b 8d 68 fe ff
	ff		 mov	 ecx, DWORD PTR _prev_result$81700[ebp]
  0025c	51		 push	 ecx
  0025d	8b 95 78 fe ff
	ff		 mov	 edx, DWORD PTR _operand_b$81699[ebp]
  00263	52		 push	 edx
  00264	8b 85 84 fe ff
	ff		 mov	 eax, DWORD PTR _operand_a$81698[ebp]
  0026a	50		 push	 eax
  0026b	e8 00 00 00 00	 call	 _do_mac_operation
  00270	83 c4 10	 add	 esp, 16			; 00000010H
  00273	8b 4d 98	 mov	 ecx, DWORD PTR _counter$81696[ebp]
  00276	89 04 cd 00 00
	00 00		 mov	 DWORD PTR _result[ecx*8], eax
  0027d	89 14 cd 04 00
	00 00		 mov	 DWORD PTR _result[ecx*8+4], edx

; 234  : 					operands_a[counter] = operand_a;

  00284	8b 45 98	 mov	 eax, DWORD PTR _counter$81696[ebp]
  00287	8b 8d 84 fe ff
	ff		 mov	 ecx, DWORD PTR _operand_a$81698[ebp]
  0028d	89 0c 85 00 00
	00 00		 mov	 DWORD PTR _operands_a[eax*4], ecx

; 235  : 					operands_b[counter] = operand_b;

  00294	8b 45 98	 mov	 eax, DWORD PTR _counter$81696[ebp]
  00297	8b 8d 78 fe ff
	ff		 mov	 ecx, DWORD PTR _operand_b$81699[ebp]
  0029d	89 0c 85 00 00
	00 00		 mov	 DWORD PTR _operands_b[eax*4], ecx

; 236  : 					fprintf(out_file_hdl,"%llu = %llu + (%d * %d)\n",result[counter],prev_result,operand_a, operand_b);

  002a4	8b f4		 mov	 esi, esp
  002a6	8b 85 78 fe ff
	ff		 mov	 eax, DWORD PTR _operand_b$81699[ebp]
  002ac	50		 push	 eax
  002ad	8b 8d 84 fe ff
	ff		 mov	 ecx, DWORD PTR _operand_a$81698[ebp]
  002b3	51		 push	 ecx
  002b4	8b 95 6c fe ff
	ff		 mov	 edx, DWORD PTR _prev_result$81700[ebp+4]
  002ba	52		 push	 edx
  002bb	8b 85 68 fe ff
	ff		 mov	 eax, DWORD PTR _prev_result$81700[ebp]
  002c1	50		 push	 eax
  002c2	8b 4d 98	 mov	 ecx, DWORD PTR _counter$81696[ebp]
  002c5	8b 14 cd 04 00
	00 00		 mov	 edx, DWORD PTR _result[ecx*8+4]
  002cc	52		 push	 edx
  002cd	8b 04 cd 00 00
	00 00		 mov	 eax, DWORD PTR _result[ecx*8]
  002d4	50		 push	 eax
  002d5	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@MFNFDPOP@?$CFllu?5?$DN?5?$CFllu?5?$CL?5?$CI?$CFd?5?$CK?5?$CFd?$CJ?6?$AA@
  002da	8b 4d dc	 mov	 ecx, DWORD PTR _out_file_hdl$[ebp]
  002dd	51		 push	 ecx
  002de	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fprintf
  002e4	83 c4 20	 add	 esp, 32			; 00000020H
  002e7	3b f4		 cmp	 esi, esp
  002e9	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 237  : 					printf("%llu = %llu + (%d * %d)\n",result[counter],prev_result,operand_a, operand_b);

  002ee	8b f4		 mov	 esi, esp
  002f0	8b 85 78 fe ff
	ff		 mov	 eax, DWORD PTR _operand_b$81699[ebp]
  002f6	50		 push	 eax
  002f7	8b 8d 84 fe ff
	ff		 mov	 ecx, DWORD PTR _operand_a$81698[ebp]
  002fd	51		 push	 ecx
  002fe	8b 95 6c fe ff
	ff		 mov	 edx, DWORD PTR _prev_result$81700[ebp+4]
  00304	52		 push	 edx
  00305	8b 85 68 fe ff
	ff		 mov	 eax, DWORD PTR _prev_result$81700[ebp]
  0030b	50		 push	 eax
  0030c	8b 4d 98	 mov	 ecx, DWORD PTR _counter$81696[ebp]
  0030f	8b 14 cd 04 00
	00 00		 mov	 edx, DWORD PTR _result[ecx*8+4]
  00316	52		 push	 edx
  00317	8b 04 cd 00 00
	00 00		 mov	 eax, DWORD PTR _result[ecx*8]
  0031e	50		 push	 eax
  0031f	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@MFNFDPOP@?$CFllu?5?$DN?5?$CFllu?5?$CL?5?$CI?$CFd?5?$CK?5?$CFd?$CJ?6?$AA@
  00324	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__printf
  0032a	83 c4 1c	 add	 esp, 28			; 0000001cH
  0032d	3b f4		 cmp	 esi, esp
  0032f	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 238  : 					//ret = list_push_back(&result_list,list_get_new_element(operand_a,operand_b,result[counter]));
; 239  : 					if(EXIT_FAILURE == ret)

  00334	83 7d f4 01	 cmp	 DWORD PTR _ret$[ebp], 1
  00338	75 02		 jne	 SHORT $LN3@main

; 240  : 					{
; 241  : 						break;

  0033a	eb 61		 jmp	 SHORT $LN12@main
$LN3@main:

; 242  : 					}
; 243  : 					prev_result =  result[counter];

  0033c	8b 45 98	 mov	 eax, DWORD PTR _counter$81696[ebp]
  0033f	8b 0c c5 00 00
	00 00		 mov	 ecx, DWORD PTR _result[eax*8]
  00346	89 8d 68 fe ff
	ff		 mov	 DWORD PTR _prev_result$81700[ebp], ecx
  0034c	8b 14 c5 04 00
	00 00		 mov	 edx, DWORD PTR _result[eax*8+4]
  00353	89 95 6c fe ff
	ff		 mov	 DWORD PTR _prev_result$81700[ebp+4], edx

; 244  : 					counter++;

  00359	8b 45 98	 mov	 eax, DWORD PTR _counter$81696[ebp]
  0035c	83 c0 01	 add	 eax, 1
  0035f	89 45 98	 mov	 DWORD PTR _counter$81696[ebp], eax
$LN6@main:

; 245  : 				}
; 246  : 			}
; 247  : 			delta_time = stop_stop_watch();

  00362	e8 00 00 00 00	 call	 _stop_stop_watch
  00367	89 85 58 fe ff
	ff		 mov	 DWORD PTR _delta_time$81701[ebp], eax
  0036d	89 95 5c fe ff
	ff		 mov	 DWORD PTR _delta_time$81701[ebp+4], edx

; 248  : 			printf("delta time us: %llu\n",delta_time);

  00373	8b f4		 mov	 esi, esp
  00375	8b 85 5c fe ff
	ff		 mov	 eax, DWORD PTR _delta_time$81701[ebp+4]
  0037b	50		 push	 eax
  0037c	8b 8d 58 fe ff
	ff		 mov	 ecx, DWORD PTR _delta_time$81701[ebp]
  00382	51		 push	 ecx
  00383	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@GADNHKCO@delta?5time?5us?3?5?$CFllu?6?$AA@
  00388	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__printf
  0038e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00391	3b f4		 cmp	 esi, esp
  00393	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 249  : 		}

  00398	e9 c9 fd ff ff	 jmp	 $LN11@main
$LN12@main:

; 250  : 	}
; 251  : 
; 252  : 	if(NULL != in_file_hdl)

  0039d	83 7d e8 00	 cmp	 DWORD PTR _in_file_hdl$[ebp], 0
  003a1	74 16		 je	 SHORT $LN2@main

; 253  : 	{
; 254  : 		fclose(in_file_hdl);

  003a3	8b f4		 mov	 esi, esp
  003a5	8b 45 e8	 mov	 eax, DWORD PTR _in_file_hdl$[ebp]
  003a8	50		 push	 eax
  003a9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fclose
  003af	83 c4 04	 add	 esp, 4
  003b2	3b f4		 cmp	 esi, esp
  003b4	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN2@main:

; 255  : 	}
; 256  : 	if(NULL != out_file_hdl)

  003b9	83 7d dc 00	 cmp	 DWORD PTR _out_file_hdl$[ebp], 0
  003bd	74 16		 je	 SHORT $LN1@main

; 257  : 	{
; 258  : 		fclose(out_file_hdl);

  003bf	8b f4		 mov	 esi, esp
  003c1	8b 45 dc	 mov	 eax, DWORD PTR _out_file_hdl$[ebp]
  003c4	50		 push	 eax
  003c5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fclose
  003cb	83 c4 04	 add	 esp, 4
  003ce	3b f4		 cmp	 esi, esp
  003d0	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN1@main:

; 259  : 	}
; 260  : 	return ret;

  003d5	8b 45 f4	 mov	 eax, DWORD PTR _ret$[ebp]

; 261  : }

  003d8	52		 push	 edx
  003d9	8b cd		 mov	 ecx, ebp
  003db	50		 push	 eax
  003dc	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN23@main
  003e2	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  003e7	58		 pop	 eax
  003e8	5a		 pop	 edx
  003e9	5f		 pop	 edi
  003ea	5e		 pop	 esi
  003eb	5b		 pop	 ebx
  003ec	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  003ef	33 cd		 xor	 ecx, ebp
  003f1	e8 00 00 00 00	 call	 @__security_check_cookie@4
  003f6	81 c4 6c 02 00
	00		 add	 esp, 620		; 0000026cH
  003fc	3b ec		 cmp	 ebp, esp
  003fe	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00403	8b e5		 mov	 esp, ebp
  00405	5d		 pop	 ebp
  00406	c3		 ret	 0
  00407	90		 npad	 1
$LN23@main:
  00408	04 00 00 00	 DD	 4
  0040c	00 00 00 00	 DD	 $LN22@main
$LN22@main:
  00410	a4 ff ff ff	 DD	 -92			; ffffffa4H
  00414	24 00 00 00	 DD	 36			; 00000024H
  00418	00 00 00 00	 DD	 $LN18@main
  0041c	90 fe ff ff	 DD	 -368			; fffffe90H
  00420	00 01 00 00	 DD	 256			; 00000100H
  00424	00 00 00 00	 DD	 $LN19@main
  00428	84 fe ff ff	 DD	 -380			; fffffe84H
  0042c	04 00 00 00	 DD	 4
  00430	00 00 00 00	 DD	 $LN20@main
  00434	78 fe ff ff	 DD	 -392			; fffffe78H
  00438	04 00 00 00	 DD	 4
  0043c	00 00 00 00	 DD	 $LN21@main
$LN21@main:
  00440	6f		 DB	 111			; 0000006fH
  00441	70		 DB	 112			; 00000070H
  00442	65		 DB	 101			; 00000065H
  00443	72		 DB	 114			; 00000072H
  00444	61		 DB	 97			; 00000061H
  00445	6e		 DB	 110			; 0000006eH
  00446	64		 DB	 100			; 00000064H
  00447	5f		 DB	 95			; 0000005fH
  00448	62		 DB	 98			; 00000062H
  00449	00		 DB	 0
$LN20@main:
  0044a	6f		 DB	 111			; 0000006fH
  0044b	70		 DB	 112			; 00000070H
  0044c	65		 DB	 101			; 00000065H
  0044d	72		 DB	 114			; 00000072H
  0044e	61		 DB	 97			; 00000061H
  0044f	6e		 DB	 110			; 0000006eH
  00450	64		 DB	 100			; 00000064H
  00451	5f		 DB	 95			; 0000005fH
  00452	61		 DB	 97			; 00000061H
  00453	00		 DB	 0
$LN19@main:
  00454	6c		 DB	 108			; 0000006cH
  00455	69		 DB	 105			; 00000069H
  00456	6e		 DB	 110			; 0000006eH
  00457	65		 DB	 101			; 00000065H
  00458	5f		 DB	 95			; 0000005fH
  00459	62		 DB	 98			; 00000062H
  0045a	75		 DB	 117			; 00000075H
  0045b	66		 DB	 102			; 00000066H
  0045c	66		 DB	 102			; 00000066H
  0045d	65		 DB	 101			; 00000065H
  0045e	72		 DB	 114			; 00000072H
  0045f	00		 DB	 0
$LN18@main:
  00460	73		 DB	 115			; 00000073H
  00461	74		 DB	 116			; 00000074H
  00462	61		 DB	 97			; 00000061H
  00463	74		 DB	 116			; 00000074H
  00464	00		 DB	 0
_main	ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _do_mac_operation
_TEXT	SEGMENT
_operand_a$ = 8						; size = 4
_operand_b$ = 12					; size = 4
_result$ = 16						; size = 8
_do_mac_operation PROC					; COMDAT

; 264  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 265  : 	return result + (operand_a * operand_b);

  0001e	8b 45 08	 mov	 eax, DWORD PTR _operand_a$[ebp]
  00021	0f af 45 0c	 imul	 eax, DWORD PTR _operand_b$[ebp]
  00025	33 d2		 xor	 edx, edx
  00027	03 45 10	 add	 eax, DWORD PTR _result$[ebp]
  0002a	13 55 14	 adc	 edx, DWORD PTR _result$[ebp+4]

; 266  : }

  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx
  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c3		 ret	 0
_do_mac_operation ENDP
_TEXT	ENDS
PUBLIC	_calculate_statistics
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _calculate_statistics
_TEXT	SEGMENT
tv81 = -196						; size = 4
tv76 = -196						; size = 4
tv74 = -196						; size = 4
tv69 = -196						; size = 4
_stat$ = 8						; size = 4
_operand_a$ = 12					; size = 4
_operand_b$ = 16					; size = 4
_calculate_statistics PROC				; COMDAT

; 270  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c4 00 00
	00		 sub	 esp, 196		; 000000c4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 3c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-196]
  00012	b9 31 00 00 00	 mov	 ecx, 49			; 00000031H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 271  : 	if(NULL != stat)

  0001e	83 7d 08 00	 cmp	 DWORD PTR _stat$[ebp], 0
  00022	0f 84 0a 01 00
	00		 je	 $LN2@calculate_

; 272  : 	{
; 273  : 		stat->max_operand_a = max(stat->max_operand_a,operand_a);

  00028	8b 45 08	 mov	 eax, DWORD PTR _stat$[ebp]
  0002b	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0002e	3b 4d 0c	 cmp	 ecx, DWORD PTR _operand_a$[ebp]
  00031	76 0e		 jbe	 SHORT $LN4@calculate_
  00033	8b 55 08	 mov	 edx, DWORD PTR _stat$[ebp]
  00036	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00039	89 85 3c ff ff
	ff		 mov	 DWORD PTR tv69[ebp], eax
  0003f	eb 09		 jmp	 SHORT $LN5@calculate_
$LN4@calculate_:
  00041	8b 4d 0c	 mov	 ecx, DWORD PTR _operand_a$[ebp]
  00044	89 8d 3c ff ff
	ff		 mov	 DWORD PTR tv69[ebp], ecx
$LN5@calculate_:
  0004a	8b 55 08	 mov	 edx, DWORD PTR _stat$[ebp]
  0004d	8b 85 3c ff ff
	ff		 mov	 eax, DWORD PTR tv69[ebp]
  00053	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 274  : 		stat->max_operand_b = max(stat->max_operand_b,operand_b);

  00056	8b 45 08	 mov	 eax, DWORD PTR _stat$[ebp]
  00059	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0005c	3b 4d 10	 cmp	 ecx, DWORD PTR _operand_b$[ebp]
  0005f	76 0e		 jbe	 SHORT $LN6@calculate_
  00061	8b 55 08	 mov	 edx, DWORD PTR _stat$[ebp]
  00064	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00067	89 85 3c ff ff
	ff		 mov	 DWORD PTR tv74[ebp], eax
  0006d	eb 09		 jmp	 SHORT $LN7@calculate_
$LN6@calculate_:
  0006f	8b 4d 10	 mov	 ecx, DWORD PTR _operand_b$[ebp]
  00072	89 8d 3c ff ff
	ff		 mov	 DWORD PTR tv74[ebp], ecx
$LN7@calculate_:
  00078	8b 55 08	 mov	 edx, DWORD PTR _stat$[ebp]
  0007b	8b 85 3c ff ff
	ff		 mov	 eax, DWORD PTR tv74[ebp]
  00081	89 42 0c	 mov	 DWORD PTR [edx+12], eax

; 275  : 		stat->min_operand_a = min(stat->min_operand_a,operand_a);

  00084	8b 45 08	 mov	 eax, DWORD PTR _stat$[ebp]
  00087	8b 08		 mov	 ecx, DWORD PTR [eax]
  00089	3b 4d 0c	 cmp	 ecx, DWORD PTR _operand_a$[ebp]
  0008c	73 0d		 jae	 SHORT $LN8@calculate_
  0008e	8b 55 08	 mov	 edx, DWORD PTR _stat$[ebp]
  00091	8b 02		 mov	 eax, DWORD PTR [edx]
  00093	89 85 3c ff ff
	ff		 mov	 DWORD PTR tv76[ebp], eax
  00099	eb 09		 jmp	 SHORT $LN9@calculate_
$LN8@calculate_:
  0009b	8b 4d 0c	 mov	 ecx, DWORD PTR _operand_a$[ebp]
  0009e	89 8d 3c ff ff
	ff		 mov	 DWORD PTR tv76[ebp], ecx
$LN9@calculate_:
  000a4	8b 55 08	 mov	 edx, DWORD PTR _stat$[ebp]
  000a7	8b 85 3c ff ff
	ff		 mov	 eax, DWORD PTR tv76[ebp]
  000ad	89 02		 mov	 DWORD PTR [edx], eax

; 276  : 		stat->min_operand_b = min(stat->min_operand_b,operand_b);

  000af	8b 45 08	 mov	 eax, DWORD PTR _stat$[ebp]
  000b2	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  000b5	3b 4d 10	 cmp	 ecx, DWORD PTR _operand_b$[ebp]
  000b8	73 0e		 jae	 SHORT $LN10@calculate_
  000ba	8b 55 08	 mov	 edx, DWORD PTR _stat$[ebp]
  000bd	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  000c0	89 85 3c ff ff
	ff		 mov	 DWORD PTR tv81[ebp], eax
  000c6	eb 09		 jmp	 SHORT $LN11@calculate_
$LN10@calculate_:
  000c8	8b 4d 10	 mov	 ecx, DWORD PTR _operand_b$[ebp]
  000cb	89 8d 3c ff ff
	ff		 mov	 DWORD PTR tv81[ebp], ecx
$LN11@calculate_:
  000d1	8b 55 08	 mov	 edx, DWORD PTR _stat$[ebp]
  000d4	8b 85 3c ff ff
	ff		 mov	 eax, DWORD PTR tv81[ebp]
  000da	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 277  : 
; 278  : 		stat->sum_operand_a += operand_a;

  000dd	8b 45 08	 mov	 eax, DWORD PTR _stat$[ebp]
  000e0	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  000e3	03 4d 0c	 add	 ecx, DWORD PTR _operand_a$[ebp]
  000e6	8b 55 08	 mov	 edx, DWORD PTR _stat$[ebp]
  000e9	89 4a 18	 mov	 DWORD PTR [edx+24], ecx

; 279  : 		stat->sum_operand_b += operand_b;

  000ec	8b 45 08	 mov	 eax, DWORD PTR _stat$[ebp]
  000ef	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  000f2	03 4d 10	 add	 ecx, DWORD PTR _operand_b$[ebp]
  000f5	8b 55 08	 mov	 edx, DWORD PTR _stat$[ebp]
  000f8	89 4a 1c	 mov	 DWORD PTR [edx+28], ecx

; 280  : 		stat->counter++;

  000fb	8b 45 08	 mov	 eax, DWORD PTR _stat$[ebp]
  000fe	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  00101	83 c1 01	 add	 ecx, 1
  00104	8b 55 08	 mov	 edx, DWORD PTR _stat$[ebp]
  00107	89 4a 20	 mov	 DWORD PTR [edx+32], ecx

; 281  : 		stat->avg_operand_a = stat->sum_operand_a/stat->counter;

  0010a	8b 45 08	 mov	 eax, DWORD PTR _stat$[ebp]
  0010d	8b 4d 08	 mov	 ecx, DWORD PTR _stat$[ebp]
  00110	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  00113	33 d2		 xor	 edx, edx
  00115	f7 71 20	 div	 DWORD PTR [ecx+32]
  00118	8b 55 08	 mov	 edx, DWORD PTR _stat$[ebp]
  0011b	89 42 10	 mov	 DWORD PTR [edx+16], eax

; 282  : 		stat->avg_operand_b = stat->sum_operand_b/stat->counter;

  0011e	8b 45 08	 mov	 eax, DWORD PTR _stat$[ebp]
  00121	8b 4d 08	 mov	 ecx, DWORD PTR _stat$[ebp]
  00124	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  00127	33 d2		 xor	 edx, edx
  00129	f7 71 20	 div	 DWORD PTR [ecx+32]
  0012c	8b 55 08	 mov	 edx, DWORD PTR _stat$[ebp]
  0012f	89 42 14	 mov	 DWORD PTR [edx+20], eax
$LN2@calculate_:

; 283  : 	}
; 284  : }

  00132	5f		 pop	 edi
  00133	5e		 pop	 esi
  00134	5b		 pop	 ebx
  00135	8b e5		 mov	 esp, ebp
  00137	5d		 pop	 ebp
  00138	c3		 ret	 0
_calculate_statistics ENDP
_TEXT	ENDS
PUBLIC	_list_get_new_element
EXTRN	__imp__malloc:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _list_get_new_element
_TEXT	SEGMENT
_temp$ = -8						; size = 4
_operand_a$ = 8						; size = 4
_operand_b$ = 12					; size = 4
_result$ = 16						; size = 8
_list_get_new_element PROC				; COMDAT

; 286  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00012	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 287  : 	listNode_t *temp = NULL;

  0001e	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _temp$[ebp], 0

; 288  : 	temp = (listNode_t*)malloc(sizeof(listNode_t));

  00025	8b f4		 mov	 esi, esp
  00027	6a 18		 push	 24			; 00000018H
  00029	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  0002f	83 c4 04	 add	 esp, 4
  00032	3b f4		 cmp	 esi, esp
  00034	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00039	89 45 f8	 mov	 DWORD PTR _temp$[ebp], eax

; 289  : 	if(NULL != temp)

  0003c	83 7d f8 00	 cmp	 DWORD PTR _temp$[ebp], 0
  00040	74 34		 je	 SHORT $LN1@list_get_n

; 290  : 	{
; 291  : 		temp-> operand_a = operand_a;

  00042	8b 45 f8	 mov	 eax, DWORD PTR _temp$[ebp]
  00045	8b 4d 08	 mov	 ecx, DWORD PTR _operand_a$[ebp]
  00048	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 292  : 		temp-> operand_b = operand_b;

  0004b	8b 45 f8	 mov	 eax, DWORD PTR _temp$[ebp]
  0004e	8b 4d 0c	 mov	 ecx, DWORD PTR _operand_b$[ebp]
  00051	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 293  : 		temp-> result = result;

  00054	8b 45 f8	 mov	 eax, DWORD PTR _temp$[ebp]
  00057	8b 4d 10	 mov	 ecx, DWORD PTR _result$[ebp]
  0005a	89 48 10	 mov	 DWORD PTR [eax+16], ecx
  0005d	8b 55 14	 mov	 edx, DWORD PTR _result$[ebp+4]
  00060	89 50 14	 mov	 DWORD PTR [eax+20], edx

; 294  : 		temp->pNext= NULL;

  00063	8b 45 f8	 mov	 eax, DWORD PTR _temp$[ebp]
  00066	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 295  : 		temp->pPrev = NULL;

  0006d	8b 45 f8	 mov	 eax, DWORD PTR _temp$[ebp]
  00070	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
$LN1@list_get_n:

; 296  : 	}
; 297  : 	return temp;

  00076	8b 45 f8	 mov	 eax, DWORD PTR _temp$[ebp]

; 298  : 
; 299  : }

  00079	5f		 pop	 edi
  0007a	5e		 pop	 esi
  0007b	5b		 pop	 ebx
  0007c	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00082	3b ec		 cmp	 ebp, esp
  00084	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00089	8b e5		 mov	 esp, ebp
  0008b	5d		 pop	 ebp
  0008c	c3		 ret	 0
_list_get_new_element ENDP
_TEXT	ENDS
PUBLIC	_list_free_element
EXTRN	__imp__free:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _list_free_element
_TEXT	SEGMENT
_elem$ = 8						; size = 4
_list_free_element PROC					; COMDAT

; 301  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 302  : 	if(NULL != elem)

  0001e	83 7d 08 00	 cmp	 DWORD PTR _elem$[ebp], 0
  00022	74 1d		 je	 SHORT $LN2@list_free_

; 303  : 	{
; 304  : 		free((void*) elem);

  00024	8b f4		 mov	 esi, esp
  00026	8b 45 08	 mov	 eax, DWORD PTR _elem$[ebp]
  00029	50		 push	 eax
  0002a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  00030	83 c4 04	 add	 esp, 4
  00033	3b f4		 cmp	 esi, esp
  00035	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 305  : 		elem = NULL;		//Pointer NULL setzen

  0003a	c7 45 08 00 00
	00 00		 mov	 DWORD PTR _elem$[ebp], 0
$LN2@list_free_:

; 306  : 	}
; 307  : }

  00041	5f		 pop	 edi
  00042	5e		 pop	 esi
  00043	5b		 pop	 ebx
  00044	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0004a	3b ec		 cmp	 ebp, esp
  0004c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00051	8b e5		 mov	 esp, ebp
  00053	5d		 pop	 ebp
  00054	c3		 ret	 0
_list_free_element ENDP
_TEXT	ENDS
PUBLIC	_list_insert_before
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _list_insert_before
_TEXT	SEGMENT
_temp$81772 = -8					; size = 4
_list$ = 8						; size = 4
_old$ = 12						; size = 4
_elem$ = 16						; size = 4
_list_insert_before PROC				; COMDAT

; 309  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00012	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 310  : 	if(NULL != old && NULL != elem)

  0001e	83 7d 0c 00	 cmp	 DWORD PTR _old$[ebp], 0
  00022	74 69		 je	 SHORT $LN3@list_inser
  00024	83 7d 10 00	 cmp	 DWORD PTR _elem$[ebp], 0
  00028	74 63		 je	 SHORT $LN3@list_inser

; 311  : 	{
; 312  : 		if(old == list->headOfList)

  0002a	8b 45 08	 mov	 eax, DWORD PTR _list$[ebp]
  0002d	8b 4d 0c	 mov	 ecx, DWORD PTR _old$[ebp]
  00030	3b 08		 cmp	 ecx, DWORD PTR [eax]
  00032	75 24		 jne	 SHORT $LN2@list_inser

; 313  : 		{
; 314  : 			elem->pPrev = NULL;

  00034	8b 45 10	 mov	 eax, DWORD PTR _elem$[ebp]
  00037	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 315  : 			elem->pNext = old;

  0003d	8b 45 10	 mov	 eax, DWORD PTR _elem$[ebp]
  00040	8b 4d 0c	 mov	 ecx, DWORD PTR _old$[ebp]
  00043	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 316  : 			old->pPrev = elem;

  00046	8b 45 0c	 mov	 eax, DWORD PTR _old$[ebp]
  00049	8b 4d 10	 mov	 ecx, DWORD PTR _elem$[ebp]
  0004c	89 08		 mov	 DWORD PTR [eax], ecx

; 317  : 			list->headOfList = elem;

  0004e	8b 45 08	 mov	 eax, DWORD PTR _list$[ebp]
  00051	8b 4d 10	 mov	 ecx, DWORD PTR _elem$[ebp]
  00054	89 08		 mov	 DWORD PTR [eax], ecx

; 318  : 		}
; 319  : 		else

  00056	eb 31		 jmp	 SHORT $LN1@list_inser
$LN2@list_inser:

; 320  : 		{
; 321  : 			listNode_t *temp = NULL;

  00058	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _temp$81772[ebp], 0

; 322  : 			temp = old->pPrev;

  0005f	8b 45 0c	 mov	 eax, DWORD PTR _old$[ebp]
  00062	8b 08		 mov	 ecx, DWORD PTR [eax]
  00064	89 4d f8	 mov	 DWORD PTR _temp$81772[ebp], ecx

; 323  : 			elem->pPrev = temp;

  00067	8b 45 10	 mov	 eax, DWORD PTR _elem$[ebp]
  0006a	8b 4d f8	 mov	 ecx, DWORD PTR _temp$81772[ebp]
  0006d	89 08		 mov	 DWORD PTR [eax], ecx

; 324  : 			
; 325  : 			temp->pNext = elem;

  0006f	8b 45 f8	 mov	 eax, DWORD PTR _temp$81772[ebp]
  00072	8b 4d 10	 mov	 ecx, DWORD PTR _elem$[ebp]
  00075	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 326  : 			old->pPrev = elem;

  00078	8b 45 0c	 mov	 eax, DWORD PTR _old$[ebp]
  0007b	8b 4d 10	 mov	 ecx, DWORD PTR _elem$[ebp]
  0007e	89 08		 mov	 DWORD PTR [eax], ecx

; 327  : 			elem->pNext = old;

  00080	8b 45 10	 mov	 eax, DWORD PTR _elem$[ebp]
  00083	8b 4d 0c	 mov	 ecx, DWORD PTR _old$[ebp]
  00086	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN1@list_inser:

; 328  : 		}
; 329  : 		return EXIT_SUCCESS;

  00089	33 c0		 xor	 eax, eax
  0008b	eb 05		 jmp	 SHORT $LN4@list_inser
$LN3@list_inser:

; 330  : 	}
; 331  : 	return EXIT_FAILURE;

  0008d	b8 01 00 00 00	 mov	 eax, 1
$LN4@list_inser:

; 332  : 	
; 333  : }

  00092	5f		 pop	 edi
  00093	5e		 pop	 esi
  00094	5b		 pop	 ebx
  00095	8b e5		 mov	 esp, ebp
  00097	5d		 pop	 ebp
  00098	c3		 ret	 0
_list_insert_before ENDP
_TEXT	ENDS
PUBLIC	_list_insert_after
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _list_insert_after
_TEXT	SEGMENT
_temp$81787 = -8					; size = 4
_list$ = 8						; size = 4
_old$ = 12						; size = 4
_elem$ = 16						; size = 4
_list_insert_after PROC					; COMDAT

; 337  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00012	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 338  : 	if(NULL != old && NULL != elem)

  0001e	83 7d 0c 00	 cmp	 DWORD PTR _old$[ebp], 0
  00022	74 6d		 je	 SHORT $LN3@list_inser@2
  00024	83 7d 10 00	 cmp	 DWORD PTR _elem$[ebp], 0
  00028	74 67		 je	 SHORT $LN3@list_inser@2

; 339  : 	{
; 340  : 		if(old == list->tailOfList)

  0002a	8b 45 08	 mov	 eax, DWORD PTR _list$[ebp]
  0002d	8b 4d 0c	 mov	 ecx, DWORD PTR _old$[ebp]
  00030	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  00033	75 26		 jne	 SHORT $LN2@list_inser@2

; 341  : 		{
; 342  : 			elem->pPrev = old;

  00035	8b 45 10	 mov	 eax, DWORD PTR _elem$[ebp]
  00038	8b 4d 0c	 mov	 ecx, DWORD PTR _old$[ebp]
  0003b	89 08		 mov	 DWORD PTR [eax], ecx

; 343  : 			elem->pNext = NULL;

  0003d	8b 45 10	 mov	 eax, DWORD PTR _elem$[ebp]
  00040	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 344  : 			old->pNext = elem;

  00047	8b 45 0c	 mov	 eax, DWORD PTR _old$[ebp]
  0004a	8b 4d 10	 mov	 ecx, DWORD PTR _elem$[ebp]
  0004d	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 345  : 			list->tailOfList = elem;

  00050	8b 45 08	 mov	 eax, DWORD PTR _list$[ebp]
  00053	8b 4d 10	 mov	 ecx, DWORD PTR _elem$[ebp]
  00056	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 346  : 		}
; 347  : 		else

  00059	eb 32		 jmp	 SHORT $LN1@list_inser@2
$LN2@list_inser@2:

; 348  : 		{
; 349  : 			listNode_t *temp = NULL;

  0005b	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _temp$81787[ebp], 0

; 350  : 			temp = old->pNext;

  00062	8b 45 0c	 mov	 eax, DWORD PTR _old$[ebp]
  00065	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00068	89 4d f8	 mov	 DWORD PTR _temp$81787[ebp], ecx

; 351  : 			elem->pNext = temp;

  0006b	8b 45 10	 mov	 eax, DWORD PTR _elem$[ebp]
  0006e	8b 4d f8	 mov	 ecx, DWORD PTR _temp$81787[ebp]
  00071	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 352  : 			
; 353  : 			temp->pPrev = elem;

  00074	8b 45 f8	 mov	 eax, DWORD PTR _temp$81787[ebp]
  00077	8b 4d 10	 mov	 ecx, DWORD PTR _elem$[ebp]
  0007a	89 08		 mov	 DWORD PTR [eax], ecx

; 354  : 			old->pNext = elem;

  0007c	8b 45 0c	 mov	 eax, DWORD PTR _old$[ebp]
  0007f	8b 4d 10	 mov	 ecx, DWORD PTR _elem$[ebp]
  00082	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 355  : 			old = elem->pPrev;

  00085	8b 45 10	 mov	 eax, DWORD PTR _elem$[ebp]
  00088	8b 08		 mov	 ecx, DWORD PTR [eax]
  0008a	89 4d 0c	 mov	 DWORD PTR _old$[ebp], ecx
$LN1@list_inser@2:

; 356  : 			
; 357  : 		}
; 358  : 			return EXIT_SUCCESS;

  0008d	33 c0		 xor	 eax, eax
  0008f	eb 05		 jmp	 SHORT $LN4@list_inser@2
$LN3@list_inser@2:

; 359  : 	}
; 360  : 	return EXIT_FAILURE;

  00091	b8 01 00 00 00	 mov	 eax, 1
$LN4@list_inser@2:

; 361  : }

  00096	5f		 pop	 edi
  00097	5e		 pop	 esi
  00098	5b		 pop	 ebx
  00099	8b e5		 mov	 esp, ebp
  0009b	5d		 pop	 ebp
  0009c	c3		 ret	 0
_list_insert_after ENDP
_TEXT	ENDS
PUBLIC	_list_push_front
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _list_push_front
_TEXT	SEGMENT
_list$ = 8						; size = 4
_elem$ = 12						; size = 4
_list_push_front PROC					; COMDAT

; 363  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 364  : 	if (NULL != elem)

  0001e	83 7d 0c 00	 cmp	 DWORD PTR _elem$[ebp], 0
  00022	74 26		 je	 SHORT $LN1@list_push_

; 365  : 	{
; 366  : 		elem->pNext = list->headOfList;

  00024	8b 45 0c	 mov	 eax, DWORD PTR _elem$[ebp]
  00027	8b 4d 08	 mov	 ecx, DWORD PTR _list$[ebp]
  0002a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0002c	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 367  : 		list->headOfList->pPrev = elem;

  0002f	8b 45 08	 mov	 eax, DWORD PTR _list$[ebp]
  00032	8b 08		 mov	 ecx, DWORD PTR [eax]
  00034	8b 55 0c	 mov	 edx, DWORD PTR _elem$[ebp]
  00037	89 11		 mov	 DWORD PTR [ecx], edx

; 368  : 		list->headOfList = elem;

  00039	8b 45 08	 mov	 eax, DWORD PTR _list$[ebp]
  0003c	8b 4d 0c	 mov	 ecx, DWORD PTR _elem$[ebp]
  0003f	89 08		 mov	 DWORD PTR [eax], ecx

; 369  : 		elem->pPrev = NULL;

  00041	8b 45 0c	 mov	 eax, DWORD PTR _elem$[ebp]
  00044	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
$LN1@list_push_:

; 370  : 	}
; 371  : 	return EXIT_SUCCESS;

  0004a	33 c0		 xor	 eax, eax

; 372  : 
; 373  : }

  0004c	5f		 pop	 edi
  0004d	5e		 pop	 esi
  0004e	5b		 pop	 ebx
  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c3		 ret	 0
_list_push_front ENDP
_TEXT	ENDS
PUBLIC	_list_push_back
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _list_push_back
_TEXT	SEGMENT
_list$ = 8						; size = 4
_elem$ = 12						; size = 4
_list_push_back PROC					; COMDAT

; 375  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 376  : 	
; 377  : 	if (NULL != elem)

  0001e	83 7d 0c 00	 cmp	 DWORD PTR _elem$[ebp], 0
  00022	74 2a		 je	 SHORT $LN1@list_push_@2

; 378  : 	{
; 379  : 		elem->pPrev = list->tailOfList;

  00024	8b 45 0c	 mov	 eax, DWORD PTR _elem$[ebp]
  00027	8b 4d 08	 mov	 ecx, DWORD PTR _list$[ebp]
  0002a	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0002d	89 10		 mov	 DWORD PTR [eax], edx

; 380  : 		list->tailOfList->pNext = elem;

  0002f	8b 45 08	 mov	 eax, DWORD PTR _list$[ebp]
  00032	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00035	8b 55 0c	 mov	 edx, DWORD PTR _elem$[ebp]
  00038	89 51 04	 mov	 DWORD PTR [ecx+4], edx

; 381  : 		list->tailOfList = elem;

  0003b	8b 45 08	 mov	 eax, DWORD PTR _list$[ebp]
  0003e	8b 4d 0c	 mov	 ecx, DWORD PTR _elem$[ebp]
  00041	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 382  : 
; 383  : 		elem->pNext = NULL;

  00044	8b 45 0c	 mov	 eax, DWORD PTR _elem$[ebp]
  00047	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
$LN1@list_push_@2:

; 384  : 
; 385  : 	}
; 386  : 	return EXIT_SUCCESS;

  0004e	33 c0		 xor	 eax, eax

; 387  : }

  00050	5f		 pop	 edi
  00051	5e		 pop	 esi
  00052	5b		 pop	 ebx
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
_list_push_back ENDP
_TEXT	ENDS
END
